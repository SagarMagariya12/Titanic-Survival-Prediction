# -*- coding: utf-8 -*-
"""Skill Based Project (ML-Lab).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xPEx7gFp7MFlwOAta3DCKCe7ZVsO9-ij

# Titanic Survival Prediction

## Importing Libraries :-
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns

"""## Data Processing :-"""

df = pd.read_csv("/content/titanic_train.csv")

# displaying top 10 entries
df.head(10)

# displaying structure of dataset
df.shape

# displaing description of dataset
df.info()

# counting the null vaue column wise
df.isnull().sum(axis=0).sort_values(ascending=False)

# droping the cabin colum because it contains many missing value
df = df.drop("Cabin", axis=1)

# displaying the distinct value of Pclass column
df["Pclass"].unique()

# ploting the bar-graph of Pclass
sns.countplot(df["Pclass"])

df["Pclass"].astype("category").value_counts()

df["Age"].mean()

df["Pclass"] == 1

df[df["Pclass"] == 1]["Age"]

df[df["Pclass"] == 1]["Age"].mean()

df[df["Pclass"] == 2]["Age"].mean()

df[df["Pclass"] == 3]["Age"].mean()

pc1_mean = round(df[df["Pclass"] == 1]["Age"].mean())
pc2_mean = round(df[df["Pclass"] == 2]["Age"].mean())
pc3_mean = round(df[df["Pclass"] == 3]["Age"].mean())

def fill_age(cols):
  age_col = cols[0]
  pclass_col = cols[1]
  
  if pd.isnull(age_col):
    if pclass_col == 1:
      return pc1_mean
    elif pclass_col == 2:
      return pc2_mean
    else:
      return pc2_mean
  else:
    return age_col

df["Age"] = df[["Age", "Pclass"]].apply(fill_age, axis=1)

df.isnull().sum(axis=0).sort_values(ascending=False)

df.dropna(inplace=True)

df.isnull().sum(axis=0).sort_values(ascending=False)

"""## Data Exporatory :-"""

sns.countplot(df["Survived"])

df.head()

df.drop(["Name", "Ticket", "PassengerId"], axis=1, inplace=True)

df.head()

df.info()

df["Sex"].unique()

df["Sex"] = df["Sex"].apply(lambda x: 1 if x=="male" else 0)

df["Embarked"].unique()

pd.get_dummies(df["Embarked"], prefix="Emb", drop_first=True)

dummies = pd.get_dummies(df["Embarked"], prefix="emb", drop_first=True)

df = pd.concat([df, dummies], axis=1)

df.drop("Embarked", axis=1, inplace=True)

df.head()

df["SibSp"].unique()

df["Pclass"].unique()

dummies = pd.get_dummies(df["Pclass"], prefix="Pcl", drop_first=True)
df = pd.concat([df, dummies], axis=1)
df.drop("Pclass", axis=1, inplace=True)

df.head()

"""## Splitting Data :-"""

X = df.drop("Survived", axis=1) 
y = df["Survived"]

from sklearn.model_selection import train_test_split

# building traing and tesing dataset
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=10)

"""## Model Trainng :-"""

from sklearn.naive_bayes import GaussianNB

# calling our model
nb = GaussianNB()

# traing our model on traing dataset
nb.fit(X_train, y_train)

"""## Prediction :-"""

prediction = nb.predict(X_test)

"""## Model Evaluation :-"""

from sklearn.metrics import confusion_matrix, classification_report

# Evaluting model using confusion matrix
print(confusion_matrix(y_test, prediction))

print(classification_report(y_test, prediction))

"""## Data Visualization Plots :-

### HeatMap :
"""

hm = sns.heatmap(data=df.corr(),center=0)

"""### Box Plot :"""

df.boxplot(by='Survived',column=['Fare'],grid=False)

"""### Density Plot :"""

df.Survived.plot.density(color='blue')

"""### Dist Plot :"""

sns.distplot(df["Survived"])

"""### Joint Plot :"""

sns.jointplot(data=df, x="Age", y="Survived")

"""### Vilion Plot :"""

sns.violinplot(df["Survived"])

"""## Data Visualization :-

### Line Plot :
"""

plt.plot(df['Age'],df['Survived'])

"""### Bar Plot :"""

plt.bar(df['Age'],df['Survived'])

"""### Histogram :"""

plt.hist(df['Survived'])
plt.show()

"""### Pie Chart :"""

plt.pie(df['Survived'])
plt.show()